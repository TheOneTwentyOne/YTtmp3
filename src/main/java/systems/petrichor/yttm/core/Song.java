package systems.petrichor.yttm.core;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;

public class Song implements Runnable {

    /* 
    ██╗   ██╗ █████╗ ██████╗ ██╗ █████╗ ██████╗ ██╗     ███████╗███████╗
    ██║   ██║██╔══██╗██╔══██╗██║██╔══██╗██╔══██╗██║     ██╔════╝██╔════╝
    ██║   ██║███████║██████╔╝██║███████║██████╔╝██║     █████╗  ███████╗
    ╚██╗ ██╔╝██╔══██║██╔══██╗██║██╔══██║██╔══██╗██║     ██╔══╝  ╚════██║
     ╚████╔╝ ██║  ██║██║  ██║██║██║  ██║██████╔╝███████╗███████╗███████║
      ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝╚══════╝
    */

    private Description description;
    private final File directoryFile;

    private final String urlString;
    private final String formattedDirectoryString;
    private String mp3FilenameString = null;
    private String mp3FilenameDirectoryString = null;
    private String imgFilenameString = null;
    private String imgFilenameDirectoryString = null;

    public boolean failed = false;

    /* 
     ██████╗ ██████╗ ███╗   ██╗███████╗████████╗██████╗ ██╗   ██╗ ██████╗████████╗ ██████╗ ██████╗ ███████╗
    ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║   ██║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗██╔════╝
    ██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ██████╔╝██║   ██║██║        ██║   ██║   ██║██████╔╝███████╗
    ██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██╗██║   ██║██║        ██║   ██║   ██║██╔══██╗╚════██║
    ╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║╚██████╔╝╚██████╗   ██║   ╚██████╔╝██║  ██║███████║
     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝  ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝
    */

    /**
     * Constructor for a song object which represents a song auto-generated by Youtube.
     * Contains all data needed for initial download and will be processed and formatted
     * later on.
     *
     * @param url       URL of the video to be downloaded.
     * @param directory Directory where files end up.
     */
    public Song(String url, String directory) {

        this.urlString = url;

        this.directoryFile = new File(directory);
        String unformattedDirectoryString = this.directoryFile.getAbsolutePath();

        if (!unformattedDirectoryString.endsWith("\\")) {
            this.formattedDirectoryString = unformattedDirectoryString + "\\";
        } else {
            this.formattedDirectoryString = unformattedDirectoryString;
        }

        try {
            Scanner scanner;

            String descriptionString = null;
            for (String fileString : Objects.requireNonNull(this.directoryFile.list())) {
                if (fileString.toLowerCase().endsWith(".description")) {
                    File descriptionFile = new File((this.formattedDirectoryString + fileString)); // Make sure to specify the directory

                    scanner = new Scanner(descriptionFile);
                    ArrayList<String> linesArrayList = new ArrayList<>(); // Initialize the ArrayList
                    while (scanner.hasNextLine()) {
                        linesArrayList.add(scanner.nextLine()); // Read and add each line to the list
                    }
                    descriptionString = String.join("\n", linesArrayList); // Join lines into a single string
                }
            }

            assert descriptionString != null;
            this.description = new Description(descriptionString);

        } catch (IllegalArgumentException e) {
            System.err.println("Song is not of the proper format (description does not start with \"Provided to YouTube by ...\"). Song must be autogenerated by YouTube.");
            failed = true;

        } catch (FileNotFoundException e) {
            System.err.println("Song description file could not be found.");
            failed = true;

        }

    }

    /* 
    ██████╗ ███████╗████████╗████████╗███████╗██████╗ ███████╗
    ██╔════╝ ██╔════╝╚══██╔══╝╚══██╔══╝██╔════╝██╔══██╗██╔════╝
    ██║  ███╗█████╗     ██║      ██║   █████╗  ██████╔╝███████╗
    ██║   ██║██╔══╝     ██║      ██║   ██╔══╝  ██╔══██╗╚════██║
    ╚██████╔╝███████╗   ██║      ██║   ███████╗██║  ██║███████║
     ╚═════╝ ╚══════╝   ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝╚══════╝    
    */

    public String getUrlString() {
        return urlString;
    }

    /*
    ██╗███╗   ██╗████████╗███████╗██████╗ ███╗   ███╗███████╗██████╗ ██╗ █████╗ ██████╗ ██╗   ██╗
    ██║████╗  ██║╚══██╔══╝██╔════╝██╔══██╗████╗ ████║██╔════╝██╔══██╗██║██╔══██╗██╔══██╗╚██╗ ██╔╝
    ██║██╔██╗ ██║   ██║   █████╗  ██████╔╝██╔████╔██║█████╗  ██║  ██║██║███████║██████╔╝ ╚████╔╝ 
    ██║██║╚██╗██║   ██║   ██╔══╝  ██╔══██╗██║╚██╔╝██║██╔══╝  ██║  ██║██║██╔══██║██╔══██╗  ╚██╔╝  
    ██║██║ ╚████║   ██║   ███████╗██║  ██║██║ ╚═╝ ██║███████╗██████╔╝██║██║  ██║██║  ██║   ██║   
    ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═════╝ ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   

    ██████╗ ██████╗  ██████╗  ██████╗███████╗███████╗███████╗███████╗███████╗                    
    ██╔══██╗██╔══██╗██╔═══██╗██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝                    
    ██████╔╝██████╔╝██║   ██║██║     █████╗  ███████╗███████╗█████╗  ███████╗                    
    ██╔═══╝ ██╔══██╗██║   ██║██║     ██╔══╝  ╚════██║╚════██║██╔══╝  ╚════██║                    
    ██║     ██║  ██║╚██████╔╝╚██████╗███████╗███████║███████║███████╗███████║                    
    ╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝                    
    */

    /**
     * Instance method that triggers the song object to begin its download.
     *
     * @throws IOException
     * @throws InterruptedException
     */
    public int startDownload() throws IOException, InterruptedException {

        String outputTemplate = this.formattedDirectoryString + "%(title)s.%(ext)s";
        String[] commandDownloadStringArray = {
            ".\\lib\\yt-dlp.exe",
            "--no-playlist",
            "--write-description",
            "--limit-rate", "100G",
            "--windows-filenames",
            "--ffmpeg-location", "lib\\",
            "--write-thumbnail",
            "--convert-thumbnails", "jpg",
            "--extract-audio",
            "--audio-format", "mp3",
            "--audio-quality", "0",
            "-o", outputTemplate,
            ("\"" + this.urlString + "\""),
        };

        return startProcess(commandDownloadStringArray);

    }

//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

    public int applyMetadata() throws IOException, InterruptedException, IllegalArgumentException {

        for (String fileString : this.directoryFile.list()) {
            if (fileString.toLowerCase().endsWith(".mp3")) {
                this.mp3FilenameString = fileString;
                this.mp3FilenameDirectoryString = this.formattedDirectoryString + this.mp3FilenameString;
            }
        }

        if (this.mp3FilenameString == null) {
            throw new IllegalArgumentException(".mp3 not found.");
        }

        new File(this.formattedDirectoryString + "\\finishedFile").mkdir();

        String outputFileNameString = this.formattedDirectoryString + "finishedFile\\" + this.mp3FilenameString;

        String[] CommandApplyMetadataStringArray;

        if (description.getYearString() == null) {
            CommandApplyMetadataStringArray = new String[] {
                ".\\lib\\ffmpeg.exe",
                "-nostdin",
                "-i",
                "\"" + this.mp3FilenameDirectoryString + "\"",
                "-metadata", ("title=" + description.getTitleString()),
                "-metadata", ("artist=" + description.getAllArtistsString()),
                "-metadata", ("album_artist=" + description.getMainArtistString()),
                "-metadata", ("album=" + description.getAlbumString()),
                "-id3v2_version", "3",
                "-write_id3v1", "1",
                "-c", "copy",
                "\"" + outputFileNameString + "\"",
                "-y",
            };
        } else {
            CommandApplyMetadataStringArray = new String[] {
                ".\\lib\\ffmpeg.exe",
                "-nostdin",
                "-i",
                "\"" + this.mp3FilenameDirectoryString + "\"",
                "-metadata", ("title=" + description.getTitleString()),
                "-metadata", ("artist=" + description.getAllArtistsString()),
                "-metadata", ("album_artist=" + description.getMainArtistString()),
                "-metadata", ("album=" + description.getAlbumString()),
                "-metadata", ("date=" + description.getYearString()),
                "-id3v2_version", "3",
                "-write_id3v1", "1",
                "-c", "copy",
                "\"" + outputFileNameString + "\"",
                "-y",
            };
        }

        return startProcess(CommandApplyMetadataStringArray);
    }

//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

    public int cropCoverArt() throws IOException, InterruptedException {

        for (String fileString : this.directoryFile.list()) {
            if (fileString.toLowerCase().endsWith(".jpg")) {
                this.imgFilenameString = fileString;
                this.imgFilenameDirectoryString = this.formattedDirectoryString + this.imgFilenameString;
            }
        }

        String[] cArtStringArray = {
            ".\\lib\\ffmpeg.exe",
            "-nostdin",
            "-i",
            "\"" + this.imgFilenameDirectoryString + "\"",
            "-vf",
            "crop='min(iw,ih):min(iw,ih)'",
            "\"" + this.imgFilenameDirectoryString + "\"",

        };

        return startProcess(cArtStringArray);

    }

//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

public int applyCoverArt() throws IOException, InterruptedException {

        for (String fileString : this.directoryFile.list()) {
            if (fileString.toLowerCase().endsWith(".jpg")) {
                this.imgFilenameString = fileString;
                this.imgFilenameDirectoryString = this.formattedDirectoryString + this.imgFilenameString;
            }
        }

        String[] cArtStringArray = {
            ".\\lib\\ffmpeg.exe",
            "-nostdin",
            "-i",
            "\"" + this.imgFilenameDirectoryString + "\"",
            "-vf",
            "crop='min(iw,ih):min(iw,ih)'",
            "\"" + this.imgFilenameDirectoryString + "\"",
        };

        return startProcess(cArtStringArray);

    }

    /*
    ██╗  ██╗███████╗██╗     ██████╗ ███████╗██████╗              
    ██║  ██║██╔════╝██║     ██╔══██╗██╔════╝██╔══██╗             
    ███████║█████╗  ██║     ██████╔╝█████╗  ██████╔╝             
    ██╔══██║██╔══╝  ██║     ██╔═══╝ ██╔══╝  ██╔══██╗             
    ██║  ██║███████╗███████╗██║     ███████╗██║  ██║             
    ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝     ╚══════╝╚═╝  ╚═╝             

    ███╗   ███╗███████╗████████╗██╗  ██╗ ██████╗ ██████╗ ███████╗
    ████╗ ████║██╔════╝╚══██╔══╝██║  ██║██╔═══██╗██╔══██╗██╔════╝
    ██╔████╔██║█████╗     ██║   ███████║██║   ██║██║  ██║███████╗
    ██║╚██╔╝██║██╔══╝     ██║   ██╔══██║██║   ██║██║  ██║╚════██║
    ██║ ╚═╝ ██║███████╗   ██║   ██║  ██║╚██████╔╝██████╔╝███████║
    ╚═╝     ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝
    */

    private int startProcess(String[] commandApplyMetadataStringArray) throws IOException, InterruptedException {
        Process metadataProcess = Runtime.getRuntime().exec(commandApplyMetadataStringArray);

        InputStream metadataErrorStream = metadataProcess.getErrorStream();
        BufferedReader metadataBufferedReader = new BufferedReader(new InputStreamReader(metadataErrorStream));

        String line;
        while ((line = metadataBufferedReader.readLine()) != null) {
            System.err.println(line);
        }

        int exitCode = metadataProcess.waitFor();
        return exitCode;
    }

//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
//██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

    public static String sanitizeFilename(String input) {
        StringBuilder sanitized = new StringBuilder();

        for (char c : input.toCharArray()) {
            switch (c) {
                case '\\' -> sanitized.append('⧵');
                case '/' -> sanitized.append('⧸');
                case ':' -> sanitized.append('꞉');
                case '*' -> sanitized.append('＊');
                case '?' -> sanitized.append('？');
                case '"' -> sanitized.append('ʺ');
                case '<' -> sanitized.append('‹');
                case '>' -> sanitized.append('›');
                case '|' -> sanitized.append('¦');
                default -> sanitized.append(c);
            }
        }

        return sanitized.toString();
    }

    /*
     ██████╗ ██████╗ ███╗   ███╗██████╗ ██╗███╗   ██╗███████╗██████╗  
    ██╔════╝██╔═══██╗████╗ ████║██╔══██╗██║████╗  ██║██╔════╝██╔══██╗ 
    ██║     ██║   ██║██╔████╔██║██████╔╝██║██╔██╗ ██║█████╗  ██║  ██║ 
    ██║     ██║   ██║██║╚██╔╝██║██╔══██╗██║██║╚██╗██║██╔══╝  ██║  ██║ 
    ╚██████╗╚██████╔╝██║ ╚═╝ ██║██████╔╝██║██║ ╚████║███████╗██████╔╝ 
     ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝╚══════╝╚═════╝  

    ███████╗██╗   ██╗███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗
    ██╔════╝██║   ██║████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║
    █████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║
    ██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║
    ██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║
    ╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝
    */

    @Override
    public void run() {
        try {
            startDownload();
            applyMetadata();
        } catch (Exception e) {
            System.out.println("OH NO");
            System.out.println(e.getStackTrace());
        }
    }
}
